# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  http-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./http-server
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -race -cover -coverprofile=coverage.out $(go list ./... | grep -Ev "_gen") -coverpkg $(go list ./... | grep -Ev "_gen" | tr "\n" "," | sed 's/.$//')

      - name: Show coverage
        run: go tool cover -func=coverage.out | awk 'END {print $NF}'

  rpc-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./rpc-server
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -race -cover -coverprofile=coverage.out $(go list ./... | grep -Ev "_gen") -coverpkg $(go list ./... | grep -Ev "_gen" | tr "\n" "," | sed 's/.$//')

      - name: Show coverage
        run: go tool cover -func=coverage.out | awk 'END {print $NF}'

  docker-compose:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Docker Compose
        run: docker-compose up -d

      - name: Check service status
        run: |
          if docker-compose ps | grep -q 'Exit'; then
            echo "Some services exited unexpectedly"
            exit 1
          else
            echo "All services are running"
          fi
